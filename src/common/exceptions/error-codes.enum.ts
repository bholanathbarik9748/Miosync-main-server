/**
 * Standardized error codes for consistent error handling across the application
 * Organized by module and error type for better maintainability
 */
export enum ErrorCode {
  // General errors
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
  VALIDATION_ERROR = 'VALIDATION_ERROR',
  UNAUTHORIZED = 'UNAUTHORIZED',
  FORBIDDEN = 'FORBIDDEN',
  NOT_FOUND = 'NOT_FOUND',
  CONFLICT = 'CONFLICT',
  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',

  // Database errors
  DATABASE_CONNECTION_ERROR = 'DATABASE_CONNECTION_ERROR',
  DATABASE_QUERY_ERROR = 'DATABASE_QUERY_ERROR',
  DATABASE_CONSTRAINT_ERROR = 'DATABASE_CONSTRAINT_ERROR',
  DATABASE_TRANSACTION_ERROR = 'DATABASE_TRANSACTION_ERROR',

  // Authentication errors
  AUTH_INVALID_CREDENTIALS = 'AUTH_INVALID_CREDENTIALS',
  AUTH_TOKEN_EXPIRED = 'AUTH_TOKEN_EXPIRED',
  AUTH_TOKEN_INVALID = 'AUTH_TOKEN_INVALID',
  AUTH_TOKEN_MISSING = 'AUTH_TOKEN_MISSING',
  AUTH_REFRESH_TOKEN_INVALID = 'AUTH_REFRESH_TOKEN_INVALID',
  AUTH_ACCOUNT_LOCKED = 'AUTH_ACCOUNT_LOCKED',
  AUTH_ACCOUNT_DISABLED = 'AUTH_ACCOUNT_DISABLED',
  AUTH_PASSWORD_RESET_EXPIRED = 'AUTH_PASSWORD_RESET_EXPIRED',
  AUTH_EMAIL_NOT_VERIFIED = 'AUTH_EMAIL_NOT_VERIFIED',

  // User errors
  USER_NOT_FOUND = 'USER_NOT_FOUND',
  USER_ALREADY_EXISTS = 'USER_ALREADY_EXISTS',
  USER_EMAIL_ALREADY_EXISTS = 'USER_EMAIL_ALREADY_EXISTS',
  USER_PHONE_ALREADY_EXISTS = 'USER_PHONE_ALREADY_EXISTS',
  USER_INVALID_TYPE = 'USER_INVALID_TYPE',
  USER_INACTIVE = 'USER_INACTIVE',

  // Event errors
  EVENT_NOT_FOUND = 'EVENT_NOT_FOUND',
  EVENT_ALREADY_EXISTS = 'EVENT_ALREADY_EXISTS',
  EVENT_INVALID_DATE = 'EVENT_INVALID_DATE',
  EVENT_REGISTRATION_CLOSED = 'EVENT_REGISTRATION_CLOSED',
  EVENT_REGISTRATION_NOT_OPEN = 'EVENT_REGISTRATION_NOT_OPEN',
  EVENT_CAPACITY_EXCEEDED = 'EVENT_CAPACITY_EXCEEDED',
  EVENT_CANNOT_DELETE_WITH_PARTICIPANTS = 'EVENT_CANNOT_DELETE_WITH_PARTICIPANTS',
  EVENT_CANNOT_MODIFY_PAST_EVENT = 'EVENT_CANNOT_MODIFY_PAST_EVENT',

  // Event Participant errors
  PARTICIPANT_NOT_FOUND = 'PARTICIPANT_NOT_FOUND',
  PARTICIPANT_ALREADY_EXISTS = 'PARTICIPANT_ALREADY_EXISTS',
  PARTICIPANT_ALREADY_REGISTERED = 'PARTICIPANT_ALREADY_REGISTERED',
  PARTICIPANT_REGISTRATION_CLOSED = 'PARTICIPANT_REGISTRATION_CLOSED',
  PARTICIPANT_INVALID_STATUS = 'PARTICIPANT_INVALID_STATUS',
  PARTICIPANT_CANNOT_MODIFY_APPROVED = 'PARTICIPANT_CANNOT_MODIFY_APPROVED',

  // Help Desk errors
  TICKET_NOT_FOUND = 'TICKET_NOT_FOUND',
  TICKET_ALREADY_EXISTS = 'TICKET_ALREADY_EXISTS',
  TICKET_INVALID_STATUS = 'TICKET_INVALID_STATUS',
  TICKET_CANNOT_MODIFY_CLOSED = 'TICKET_CANNOT_MODIFY_CLOSED',
  TICKET_INVALID_PRIORITY = 'TICKET_INVALID_PRIORITY',
  TICKET_ASSIGNMENT_FAILED = 'TICKET_ASSIGNMENT_FAILED',

  // File upload errors
  FILE_UPLOAD_ERROR = 'FILE_UPLOAD_ERROR',
  FILE_TOO_LARGE = 'FILE_TOO_LARGE',
  FILE_INVALID_TYPE = 'FILE_INVALID_TYPE',
  FILE_NOT_FOUND = 'FILE_NOT_FOUND',

  // External service errors
  EXTERNAL_SERVICE_UNAVAILABLE = 'EXTERNAL_SERVICE_UNAVAILABLE',
  EXTERNAL_SERVICE_TIMEOUT = 'EXTERNAL_SERVICE_TIMEOUT',
  EXTERNAL_SERVICE_INVALID_RESPONSE = 'EXTERNAL_SERVICE_INVALID_RESPONSE',

  // Business logic errors
  BUSINESS_RULE_VIOLATION = 'BUSINESS_RULE_VIOLATION',
  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',
  RESOURCE_LOCKED = 'RESOURCE_LOCKED',
  DEPENDENCY_NOT_SATISFIED = 'DEPENDENCY_NOT_SATISFIED',
}

/**
 * Error code categories for better organization
 */
export enum ErrorCategory {
  GENERAL = 'GENERAL',
  DATABASE = 'DATABASE',
  AUTHENTICATION = 'AUTHENTICATION',
  AUTHORIZATION = 'AUTHORIZATION',
  VALIDATION = 'VALIDATION',
  BUSINESS_LOGIC = 'BUSINESS_LOGIC',
  EXTERNAL_SERVICE = 'EXTERNAL_SERVICE',
  FILE_OPERATION = 'FILE_OPERATION',
}

/**
 * Get error category from error code
 */
export function getErrorCategory(errorCode: ErrorCode): ErrorCategory {
  const code = errorCode.toString();
  
  if (code.startsWith('AUTH_')) return ErrorCategory.AUTHENTICATION;
  if (code.startsWith('DATABASE_')) return ErrorCategory.DATABASE;
  if (code.startsWith('USER_') || code.startsWith('EVENT_') || 
      code.startsWith('PARTICIPANT_') || code.startsWith('TICKET_')) {
    return ErrorCategory.BUSINESS_LOGIC;
  }
  if (code.startsWith('FILE_')) return ErrorCategory.FILE_OPERATION;
  if (code.startsWith('EXTERNAL_')) return ErrorCategory.EXTERNAL_SERVICE;
  if (code.includes('VALIDATION') || code.includes('INVALID')) return ErrorCategory.VALIDATION;
  if (code.includes('FORBIDDEN') || code.includes('UNAUTHORIZED')) return ErrorCategory.AUTHORIZATION;
  
  return ErrorCategory.GENERAL;
}
